import telebot
import lib
import config
import random


bot = telebot.TeleBot(config.API_KEY)

commands = [
    "start",
    "help", 
    "feedback", 
    "fact"
]

main_keyboard_buttons = [
    "–ü–ª–∞—Å—Ç–º–∞—Å—Å–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏ ü´ô",
    "–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –±–∞–Ω–∫–∏ ü•´", 
    "–ö—Ä—ã—à–∫–∏ –æ—Ç –±—É—Ç—ã–ª–æ–∫ üî¥",
    "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã/–∞—à–∫–∏ üîã",
    "–ì–¥–µ —è?",
    "–ü–æ–º–µ–Ω—è—Ç—å –∫–æ—Ä–ø—É—Å"
]

help_text = """–ü—Ä–∏–≤–µ—Ç!
–Ø ‚Äì —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Å—Ç–º–∞—Å—Å–æ–≤—ã—Ö –±—É—Ç—ã–ª–æ–∫, –∞–ª—é–º–∏–Ω–∏–µ–≤—ã—Ö –±–∞–Ω–æ–∫ –∏ –∫—Ä—ã—à–µ–∫ —Ä—è–¥–æ–º —Å —Ç–≤–æ–∏–º –∫–æ—Ä–ø—É—Å–æ–º.

–£ –º–µ–Ω—è –µ—Å—Ç—å 4 –∫–æ–º–∞–Ω–¥—ã:
1) /start - –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ—Ä–ø—É—Å–∞
2) /help - –≤—ã–≤–æ–¥–∏—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
3) /feedback - –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —Ñ–∏–¥–±–µ–∫
4) /fact - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
"""

with open(config.FACTS_FILE_PATH, "r") as f:
    facts = list(map(lambda x: x.strip(), f.readlines()))

bot.set_my_commands([
    telebot.types.BotCommand("/start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"), 
    telebot.types.BotCommand("/help", "–ü–æ–º–æ—â—å"), 
    telebot.types.BotCommand("/feedback", "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), 
    telebot.types.BotCommand("/fact", "–§–∞–∫—Ç")
])

main_keyboard = telebot.types.ReplyKeyboardMarkup()
main_keyboard.add(*main_keyboard_buttons[:4], row_width=2)
main_keyboard.add(main_keyboard_buttons[4])
main_keyboard.add(main_keyboard_buttons[5])


@bot.message_handler(commands=["start"])
def start(message):
    if message.chat.id == config.MONITOR_CHAT_ID:
        return

    buildings = list(map(lambda x: x[0], lib.exec_query("select address from buildings")))

    ans = "–í—ã–±–µ—Ä–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ —Ç–µ–±–µ –∫–æ—Ä–ø—É—Å *(–Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ)*:\n\n"
    for i, building in enumerate(buildings):
        ans += f"{lib.int_to_emoji(i + 1)} - {building}\n"
    
    nums_keyboard = telebot.types.ReplyKeyboardMarkup()
    for row in lib.group(range(1, len(buildings) + 1), 4):
        nums_keyboard.add(*list(map(lambda x: str(x), row)), row_width=4)
    nums_keyboard.add("–û—Ç–º–µ–Ω–∞")
    
    bot.send_message(message.chat.id, ans, parse_mode="Markdown", reply_markup=nums_keyboard)
    bot.register_next_step_handler(message, lib.verify_building_choice, bot, main_keyboard)


@bot.message_handler(commands=["help"])
def help(message):
    if message.chat.id == config.MONITOR_CHAT_ID:
        return
    
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")


@bot.message_handler(commands=["feedback"])
def feedback(message):
    if message.chat.id == config.MONITOR_CHAT_ID:
        return
    
    bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –ø–æ–∂–µ–ª–∞–Ω–∏—è")
    bot.register_next_step_handler(message, lib.add_feedback, bot)


@bot.message_handler(commands=["fact"])
def fact(message):
    if message.chat.id == config.MONITOR_CHAT_ID:
        return
    
    bot.send_message(message.chat.id, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç ‚ôªÔ∏è\n\n" + random.choice(facts), reply_markup=main_keyboard)


@bot.message_handler(commands=["show_feedbacks"])
def show_feedbacks(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å—É–ø–µ—Ä-—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(message, lib.show_feedbacks, bot)


@bot.message_handler(content_types=["text"])
def answer(message):
    if message.chat.id == config.MONITOR_CHAT_ID:
        return

    if not lib.exec_query(f"select * from users where id = {message.chat.id};"):
        start(message)
        return
    
    table = ""
    
    match message.text:
        case "–ü–ª–∞—Å—Ç–º–∞—Å—Å–æ–≤—ã–µ –±—É—Ç—ã–ª–∫–∏ ü´ô":
            table = "plastic"

        case "–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–µ –±–∞–Ω–∫–∏ ü•´":
            table = "metall"
            
        case "–ö—Ä—ã—à–∫–∏ –æ—Ç –±—É—Ç—ã–ª–æ–∫ üî¥":
            table = "caps"
        
        case "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã/–∞—à–∫–∏ üîã":
            table = "battaries"

        case "–ì–¥–µ —è?":
            building = lib.exec_query(f"select address from users u join buildings b on u.building_id = b.id where u.id = {message.chat.id}")[0][0]
            bot.send_message(message.chat.id, f"–£ —Ç–µ–±—è –≤—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å:\n{building}", reply_markup=main_keyboard)

        case "–ü–æ–º–µ–Ω—è—Ç—å –∫–æ—Ä–ø—É—Å":
            start(message)
        
    if message.text in main_keyboard_buttons[:4]:
        data = lib.exec_query(f"select description, address from {table} p join users u using (building_id) where u.id = {message.chat.id}")
        lib.send_addresses(message.chat.id, bot, data)

bot.infinity_polling()

